"""

    SSG uses a particular file type to render images, 
    a .ssg file, which is a simple pixel map image with VGA indexed colors...

    Version 2.0, SlickSpore --> https://github.com/slickspore

"""



import argparse

parser = argparse.ArgumentParser("PPM to SSG Converter v2.0 (SlickSpore)","This Program Converts A PPM file to a (S)lick (S)pore (G)aphics file")

parser.add_argument("input_filename")
parser.add_argument("output_filename")

args = parser.parse_args()

palette = args.input_filename
o_File  = args.output_filename

CVT_TABLE_VGA = {
    '[0, 0, 0]'        :0x00,
    '[0, 0, 170]'      :0x01,
    '[0, 170, 0]'      :0x02,
    '[0, 170, 170]'    :0x03,
    '[170, 0, 0]'      :0x04,
    '[170, 0, 170]'    :0x05,
    '[170, 85, 0]'     :0x06,
    '[170, 170, 170]'  :0x07,
    '[85, 85, 85]'     :0x08,
    '[85, 85, 255]'    :0x09,
    '[85, 255, 85]'    :0x0a,
    '[85, 255, 255]'   :0x0b,
    '[255, 85, 85]'    :0x0c,
    '[255, 85, 255]'   :0x0d,
    '[255, 255, 85]'   :0x0e,
    '[255, 255, 255]'  :0x0f,
    '[16, 16, 16]'     :0x11,
    '[32, 32, 32]'     :0x12,
    '[53, 53, 53]'     :0x13,
    '[69, 69, 69]'     :0x14,
    '[101, 101, 101]'  :0x16,
    '[117, 117, 117]'  :0x17,
    '[138, 138, 138]'  :0x18,
    '[154, 154, 154]'  :0x19,
    '[186, 186, 186]'  :0x1b,
    '[202, 202, 202]'  :0x1c,
    '[223, 223, 223]'  :0x1d,
    '[239, 239, 239]'  :0x1e,
    '[0, 0, 255]'      :0x20,
    '[65, 0, 255]'     :0x21,
    '[130, 0, 255]'    :0x22,
    '[190, 0, 255]'    :0x23,
    '[255, 0, 255]'    :0x24,
    '[255, 0, 190]'    :0x25,
    '[255, 0, 130]'    :0x26,
    '[255, 0, 65]'     :0x27,
    '[255, 0, 0]'      :0x28,
    '[255, 65, 0]'     :0x29,
    '[255, 130, 0]'    :0x2a,
    '[255, 190, 0]'    :0x2b,
    '[255, 255, 0]'    :0x2c,
    '[190, 255, 0]'    :0x2d,
    '[130, 255, 0]'    :0x2e,
    '[65, 255, 0]'     :0x2f,
    '[0, 255, 0]'      :0x30,
    '[0, 255, 65]'     :0x31,
    '[0, 255, 130]'    :0x32,
    '[0, 255, 190]'    :0x33,
    '[0, 255, 255]'    :0x34,
    '[0, 190, 255]'    :0x35,
    '[0, 130, 255]'    :0x36,
    '[0, 65, 255]'     :0x37,
    '[130, 130, 255]'  :0x38,
    '[158, 130, 255]'  :0x39,
    '[190, 130, 255]'  :0x3a,
    '[223, 130, 255]'  :0x3b,
    '[255, 130, 255]'  :0x3c,
    '[255, 130, 223]'  :0x3d,
    '[255, 130, 190]'  :0x3e,
    '[255, 130, 158]'  :0x3f,
    '[255, 130, 130]'  :0x40,
    '[255, 158, 130]'  :0x41,
    '[255, 190, 130]'  :0x42,
    '[255, 223, 130]'  :0x43,
    '[255, 255, 130]'  :0x44,
    '[223, 255, 130]'  :0x45,
    '[190, 255, 130]'  :0x46,
    '[158, 255, 130]'  :0x47,
    '[130, 255, 130]'  :0x48,
    '[130, 255, 158]'  :0x49,
    '[130, 255, 190]'  :0x4a,
    '[130, 255, 223]'  :0x4b,
    '[130, 255, 255]'  :0x4c,
    '[130, 223, 255]'  :0x4d,
    '[130, 190, 255]'  :0x4e,
    '[130, 158, 255]'  :0x4f,
    '[186, 186, 255]'  :0x50,
    '[202, 186, 255]'  :0x51,
    '[223, 186, 255]'  :0x52,
    '[239, 186, 255]'  :0x53,
    '[255, 186, 255]'  :0x54,
    '[255, 186, 239]'  :0x55,
    '[255, 186, 223]'  :0x56,
    '[255, 186, 202]'  :0x57,
    '[255, 186, 186]'  :0x58,
    '[255, 202, 186]'  :0x59,
    '[255, 223, 186]'  :0x5a,
    '[255, 239, 186]'  :0x5b,
    '[255, 255, 186]'  :0x5c,
    '[239, 255, 186]'  :0x5d,
    '[223, 255, 186]'  :0x5e,
    '[202, 255, 186]'  :0x5f,
    '[186, 255, 186]'  :0x60,
    '[186, 255, 202]'  :0x61,
    '[186, 255, 223]'  :0x62,
    '[186, 255, 239]'  :0x63,
    '[186, 255, 255]'  :0x64,
    '[186, 239, 255]'  :0x65,
    '[186, 223, 255]'  :0x66,
    '[186, 202, 255]'  :0x67,
    '[0, 0, 113]'      :0x68,
    '[28, 0, 113]'     :0x69,
    '[57, 0, 113]'     :0x6a,
    '[85, 0, 113]'     :0x6b,
    '[113, 0, 113]'    :0x6c,
    '[113, 0, 85]'     :0x6d,
    '[113, 0, 57]'     :0x6e,
    '[113, 0, 28]'     :0x6f,
    '[113, 0, 0]'      :0x70,
    '[113, 28, 0]'     :0x71,
    '[113, 57, 0]'     :0x72,
    '[113, 85, 0]'     :0x73,
    '[113, 113, 0]'    :0x74,
    '[85, 113, 0]'     :0x75,
    '[57, 113, 0]'     :0x76,
    '[28, 113, 0]'     :0x77,
    '[0, 113, 0]'      :0x78,
    '[0, 113, 28]'     :0x79,
    '[0, 113, 57]'     :0x7a,
    '[0, 113, 85]'     :0x7b,
    '[0, 113, 113]'    :0x7c,
    '[0, 85, 113]'     :0x7d,
    '[0, 57, 113]'     :0x7e,
    '[0, 28, 113]'     :0x7f,
    '[57, 57, 113]'    :0x80,
    '[69, 57, 113]'    :0x81,
    '[85, 57, 113]'    :0x82,
    '[97, 57, 113]'    :0x83,
    '[113, 57, 113]'   :0x84,
    '[113, 57, 97]'    :0x85,
    '[113, 57, 85]'    :0x86,
    '[113, 57, 69]'    :0x87,
    '[113, 57, 57]'    :0x88,
    '[113, 69, 57]'    :0x89,
    '[113, 85, 57]'    :0x8a,
    '[113, 97, 57]'    :0x8b,
    '[113, 113, 57]'   :0x8c,
    '[97, 113, 57]'    :0x8d,
    '[85, 113, 57]'    :0x8e,
    '[69, 113, 57]'    :0x8f,
    '[57, 113, 57]'    :0x90,
    '[57, 113, 69]'    :0x91,
    '[57, 113, 85]'    :0x92,
    '[57, 113, 97]'    :0x93,
    '[57, 113, 113]'   :0x94,
    '[57, 97, 113]'    :0x95,
    '[57, 85, 113]'    :0x96,
    '[57, 69, 113]'    :0x97,
    '[81, 81, 113]'    :0x98,
    '[89, 81, 113]'    :0x99,
    '[97, 81, 113]'    :0x9a,
    '[105, 81, 113]'   :0x9b,
    '[113, 81, 113]'   :0x9c,
    '[113, 81, 105]'   :0x9d,
    '[113, 81, 97]'    :0x9e,
    '[113, 81, 89]'    :0x9f,
    '[113, 81, 81]'    :0xa0,
    '[113, 89, 81]'    :0xa1,
    '[113, 97, 81]'    :0xa2,
    '[113, 105, 81]'   :0xa3,
    '[113, 113, 81]'   :0xa4,
    '[105, 113, 81]'   :0xa5,
    '[97, 113, 81]'    :0xa6,
    '[89, 113, 81]'    :0xa7,
    '[81, 113, 81]'    :0xa8,
    '[81, 113, 89]'    :0xa9,
    '[81, 113, 97]'    :0xaa,
    '[81, 113, 105]'   :0xab,
    '[81, 113, 113]'   :0xac,
    '[81, 105, 113]'   :0xad,
    '[81, 97, 113]'    :0xae,
    '[81, 89, 113]'    :0xaf,
    '[0, 0, 65]'       :0xb0,
    '[16, 0, 65]'      :0xb1,
    '[32, 0, 65]'      :0xb2,
    '[49, 0, 65]'      :0xb3,
    '[65, 0, 65]'      :0xb4,
    '[65, 0, 49]'      :0xb5,
    '[65, 0, 32]'      :0xb6,
    '[65, 0, 16]'      :0xb7,
    '[65, 0, 0]'       :0xb8,
    '[65, 16, 0]'      :0xb9,
    '[65, 32, 0]'      :0xba,
    '[65, 49, 0]'      :0xbb,
    '[65, 65, 0]'      :0xbc,
    '[49, 65, 0]'      :0xbd,
    '[32, 65, 0]'      :0xbe,
    '[16, 65, 0]'      :0xbf,
    '[0, 65, 0]'       :0xc0,
    '[0, 65, 16]'      :0xc1,
    '[0, 65, 32]'      :0xc2,
    '[0, 65, 49]'      :0xc3,
    '[0, 65, 65]'      :0xc4,
    '[0, 49, 65]'      :0xc5,
    '[0, 32, 65]'      :0xc6,
    '[0, 16, 65]'      :0xc7,
    '[32, 32, 65]'     :0xc8,
    '[40, 32, 65]'     :0xc9,
    '[49, 32, 65]'     :0xca,
    '[57, 32, 65]'     :0xcb,
    '[65, 32, 65]'     :0xcc,
    '[65, 32, 57]'     :0xcd,
    '[65, 32, 49]'     :0xce,
    '[65, 32, 40]'     :0xcf,
    '[65, 32, 32]'     :0xd0,
    '[65, 40, 32]'     :0xd1,
    '[65, 49, 32]'     :0xd2,
    '[65, 57, 32]'     :0xd3,
    '[65, 65, 32]'     :0xd4,
    '[57, 65, 32]'     :0xd5,
    '[49, 65, 32]'     :0xd6,
    '[40, 65, 32]'     :0xd7,
    '[32, 65, 32]'     :0xd8,
    '[32, 65, 40]'     :0xd9,
    '[32, 65, 49]'     :0xda,
    '[32, 65, 57]'     :0xdb,
    '[32, 65, 65]'     :0xdc,
    '[32, 57, 65]'     :0xdd,
    '[32, 49, 65]'     :0xde,
    '[32, 40, 65]'     :0xdf,
    '[45, 45, 65]'     :0xe0,
    '[49, 45, 65]'     :0xe1,
    '[53, 45, 65]'     :0xe2,
    '[61, 45, 65]'     :0xe3,
    '[65, 45, 65]'     :0xe4,
    '[65, 45, 61]'     :0xe5,
    '[65, 45, 53]'     :0xe6,
    '[65, 45, 49]'     :0xe7,
    '[65, 45, 45]'     :0xe8,
    '[65, 49, 45]'     :0xe9,
    '[65, 53, 45]'     :0xea,
    '[65, 61, 45]'     :0xeb,
    '[65, 65, 45]'     :0xec,
    '[61, 65, 45]'     :0xed,
    '[53, 65, 45]'     :0xee,
    '[49, 65, 45]'     :0xef,
    '[45, 65, 45]'     :0xf0,
    '[45, 65, 49]'     :0xf1,
    '[45, 65, 53]'     :0xf2,
    '[45, 65, 61]'     :0xf3,
    '[45, 65, 65]'     :0xf4,
    '[45, 61, 65]'     :0xf5,
    '[45, 53, 65]'     :0xf6,
    '[45, 49, 65]'     :0xf7
}       


class PPM2VGA:
    def __init__(self):
        pass
    def load_image_ppm(self, i_path):

        with open(i_path, "rb") as f:
            p_bytes     = list(f.read())
            self.PX_rgb = [] 
            res_buf = []
            for i in range(len(p_bytes)-3):
                if (p_bytes[i+3]) == 0x0A:
                    j = i + 3
                    while(1):
                        j+=1
                        if p_bytes[j] == 0xa:
                            break
                        res_buf.append(chr(p_bytes[j]))
                    break        
            reso_buf = "".join(res_buf).split(" ")

            self.reso = [int(reso_buf[0]),int(reso_buf[1])]

            for i in range(len(p_bytes)-2):
                last_two = [] 
                last_two.append(chr(p_bytes[i]))
                last_two.append(chr(p_bytes[i + 1]))
                last_two.append(chr(p_bytes[i + 2]))
                if "".join(last_two) == "255":
                    position = i + 4

            for j in range(position,len(p_bytes)):
                self.PX_rgb.append(p_bytes[j])
        
    def convert_image_ppm(self, o_path):
        self.buffer = []
        index  = 0
        tmp    = []
        self.VGA_INDEXED = []
        self.converted_bytes = ""

        for i in self.PX_rgb:
            if index == 3:
                self.buffer.append(tmp)
                tmp = []
                index = 0
            tmp.append(i)
            index += 1
        
        self.buffer.append([self.PX_rgb[len(self.PX_rgb)-3],self.PX_rgb[len(self.PX_rgb)-2],self.PX_rgb[len(self.PX_rgb)-1]])

        for i in self.buffer:
            self.VGA_INDEXED.append(CVT_TABLE_VGA[str(i)])
        
        with open(o_path,"wb") as f:
            f.write(self.reso[0].to_bytes(2,'big'))
            f.write(self.reso[1].to_bytes(2,'big'))

            for i in self.VGA_INDEXED:
                f.write(i.to_bytes(1,'big'))



cvt_ppm_vga = PPM2VGA()
cvt_ppm_vga.load_image_ppm(palette)
cvt_ppm_vga.convert_image_ppm(o_File)